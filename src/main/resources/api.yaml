openapi: "3.0.0"
info:
  description: "This project back the Hospital Systems with the required API and backend services."
  version: "1.0.0"
  title: "Secure Hospital System"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "spapani@asu.edu"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
paths:
  /user/signUp:
    post:
      summary: "Create a user and return associated JWT"
      operationId: signUp
      tags:
        - user
      requestBody:
        required: true
        description: "User object signup related fields"
        content:
          application/json:
            schema:
              type: "object"
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: "User registration successful!"
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/UserJwt'
  /user/login:
    post:
      summary: "Login user"
      operationId: login
      tags:
        - user
      requestBody:
        required: true
        description: "User Object login related fields"
        content:
          application/json:
            schema:
              type: "object"
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: "User registration successful!"
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/UserJwt'
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      required:
         - emailId
         - password
      properties:
         firstName:
           type: string
         lastName:
           type: string
         emailId:
           type: string
         password:
           type: string
         phone:
           type: string
    UserJwt:
      type: object
      properties:
        jwtToken:
          type: string
    Appointment:
      type: object
      properties:
        user:
          type: User
    
    
# 2) Apply the security globally to all operations
security:
  - bearerAuth: []         # use the same name as above
           